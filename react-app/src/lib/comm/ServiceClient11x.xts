import { JSONRPCClient } from './JSONRPC11';
import { JSONValue } from '../json';

export interface ServiceClientParams {
    url: string;
    timeout: number;
    authorization?: string;
}

export type ResultTransformer<T> = (value: JSONValue) => T;

export abstract class ServiceClient {
    abstract module: string;
    url: string;
    timeout: number;
    authorization?: string;

    constructor({ url, timeout, authorization }: ServiceClientParams) {
        this.url = url;
        this.timeout = timeout;
        this.authorization = authorization;
    }

    async callFunc<ParamType extends JSONRPCRequestParams, ReturnType extends JSONValue>(
        funcName: string,
        params: ParamType,
        transformer?: ResultTransformer<ReturnType>
    ): Promise<ReturnType> {
        const client = new JSONRPCClient({
            url: this.url,
            timeout: this.timeout,
            authorization: this.authorization
        });
        const method = `${this.module}.${funcName}`;
        const result = await client.callMethod(method, params, {
            timeout: this.timeout
        });

        if (typeof transformer === 'undefined') {
            return (result as unknown) as ReturnType;
        }

        return transformer(result);

    }
}